# telegram_bot/notifications.py
from aiogram import Bot
from django.conf import settings
from accounts.models import UserProfile
from shop.models import Order, OrderItem
import asyncio
from asgiref.sync import sync_to_async # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

async def send_new_order_notification(order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        order = await sync_to_async(Order.objects.get)(id=order_id)
        # –ü–æ–ª—É—á–∞–µ–º OrderItem - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        items = await sync_to_async(list)(OrderItem.objects.filter(order=order))
        items_str = "\n".join([f"- {item.product.name} x{item.quantity}" for item in items])
        order_info = (
            f"üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.username} (ID: {order.user.id})\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.delivery_phone}\n"
            f"–ò—Ç–æ–≥–æ: {order.total_price} ‚ÇΩ\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{items_str}\n"
        )

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram ID - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        admin_profiles = await sync_to_async(list)(
            UserProfile.objects.filter(
                user__is_staff=True, # –∏–ª–∏ user__is_superuser=True
                telegram_id__isnull=False,
                telegram_email_confirmed=True # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            )
        )

        for profile in admin_profiles:
            try:
                await bot.send_message(chat_id=profile.telegram_id, text=order_info)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {profile.telegram_id}: {e}")

    except Order.DoesNotExist:
        print(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

async def send_order_status_update_notification(order_id, old_status_display, new_status_display):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞–∫–∞–∑–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        order = await sync_to_async(Order.objects.get)(id=order_id)
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        user_profile = await sync_to_async(lambda: getattr(order.user, 'profile', None))() # –û–±–µ—Ä—Ç—ã–≤–∞–µ–º lambda

        if user_profile and user_profile.telegram_id and user_profile.telegram_email_confirmed:
            message = f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å '{old_status_display}' –Ω–∞ '{new_status_display}'."
            try:
                await bot.send_message(chat_id=user_profile.telegram_id, text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_profile.telegram_id}: {e}")

    except Order.DoesNotExist:
        print(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤)
def run_async_notification(coro):
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö, –ª—É—á—à–µ –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –∫–æ—Ä—É—Ç–∏–Ω—É –≤ sync_to_async
    # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Celery.
    # asyncio.run(coro) # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Django.
    # sync_to_async(loop.run_until_complete)(coro) # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    # –ù–æ aiogram –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ö–∞–∫–∞.
    # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ chat_id –≤ Celery –∑–∞–¥–∞—á—É.
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ —ç—Ç–æ —Ö—Ä—É–ø–∫–æ–µ –º–µ—Å—Ç–æ.
    # run_async_notification —Å–∞–º–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ sync_to_async –≤ signals.py
    loop.run_until_complete(coro)