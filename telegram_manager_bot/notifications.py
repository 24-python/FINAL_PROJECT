# telegram_manager_bot/notifications.py
from aiogram import Bot
from aiogram.types import FSInputFile
from django.conf import settings
from asgiref.sync import sync_to_async
import asyncio
import threading
import logging

logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ë–û–¢–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏) ---
# bot = Bot(token=settings.TELEGRAM_MANAGER_BOT_TOKEN) # <-- –≠—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ç–æ–∫–∞
# --- /–ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ë–û–¢–ê ---

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ID –ú–ï–ù–ï–î–ñ–ï–†–û–í (–∏–∑ utils) ---
from telegram_manager_bot.utils import get_user_by_telegram_id_async # –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID

# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å ID –∞–¥–º–∏–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å UserProfile
async def get_manager_chat_ids():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ UserProfile
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –º–æ–¥–µ–ª—å
    from accounts.models import UserProfile
    profiles = await sync_to_async(list)(UserProfile.objects.filter(user__is_superuser=True))
    chat_ids = [profile.telegram_id for profile in profiles if profile.telegram_id]
    print(f"[DEBUG notifications.py] –ù–∞–π–¥–µ–Ω—ã ID –∞–¥–º–∏–Ω–æ–≤: {chat_ids}")
    return chat_ids
# --- /–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–û–í–û–ú –ó–ê–ö–ê–ó–ï ---
async def send_new_order_to_managers(order_id, bot_instance):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    print(f"[DEBUG notifications.py] –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ #{order_id}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ #{order_id}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Django
    from telegram_manager_bot.utils import get_order_details_async
    from telegram_manager_bot.keyboards import get_order_status_keyboard # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    try:
        details = await get_order_details_async(order_id)
        print(f"[DEBUG notifications.py] –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {details}")
    except Exception as e:
        print(f"[ERROR notifications.py] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        return

    if not details or not details.get('image_paths'):
        print(f"[DEBUG notifications.py] –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        logger.warning(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    manager_ids = await get_manager_chat_ids()
    if not manager_ids:
        print("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        logger.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    order_info_caption = (
        f"üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó #{details['id']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {details['user']}\n"
        f"–°—Ç–∞—Ç—É—Å: {details['status']}\n"
        f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {details['payment_status']}\n"
        f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {details['delivery_date']}\n"
        f"–ê–¥—Ä–µ—Å: {details['delivery_address']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {details['delivery_phone']}\n"
        f"–ò—Ç–æ–≥–æ: {details['total_price']} ‚ÇΩ\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {details['comment'] or '–ù–µ—Ç'}\n"
        f"–¢–æ–≤–∞—Ä—ã:\n" + "\n".join(details['items_list'])
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_order_status_keyboard(details['status'].lower()) # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Å—Ç–∞—Ç—É—Å–∞

    for tg_id in manager_ids:
        try:
            image_paths = details['image_paths']
            if image_paths:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                first_img_path = image_paths[0]
                if os.path.isfile(first_img_path):
                    input_file = FSInputFile(first_img_path)
                    await bot_instance.send_photo(
                        chat_id=tg_id,
                        photo=input_file,
                        caption=order_info_caption,
                        reply_markup=keyboard
                    )
                    print(f"[DEBUG notifications.py] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {first_img_path} —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    for img_path in image_paths[1:]:
                        if os.path.isfile(img_path):
                            next_input_file = FSInputFile(img_path)
                            await bot_instance.send_photo(chat_id=tg_id, photo=next_input_file)
                            print(f"[DEBUG notifications.py] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")
                        else:
                            print(f"[DEBUG notifications.py] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {img_path}")
                else:
                    print(f"[DEBUG notifications.py] –§–∞–π–ª –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {first_img_path}")
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await bot_instance.send_message(chat_id=tg_id, text=order_info_caption, reply_markup=keyboard)
                    print(f"[DEBUG notifications.py] Fallback: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await bot_instance.send_message(chat_id=tg_id, text=order_info_caption, reply_markup=keyboard)
                print(f"[DEBUG notifications.py] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")
        except Exception as e:
            print(f"[ERROR notifications.py] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id} (–∑–∞–∫–∞–∑ #{order_id}): {e}")

# --- /–§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–û–í–û–ú –ó–ê–ö–ê–ó–ï ---

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–ú–ï–ù–ï –°–¢–ê–¢–£–°–ê ---
async def send_order_status_update_to_managers(order_id, old_status, new_status, user_id, bot_instance):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    print(f"[DEBUG notifications.py] –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} —Å '{old_status}' –Ω–∞ '{new_status}'")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ç
    from django.contrib.auth.models import User
    from telegram_manager_bot.utils import get_manager_chat_ids

    try:
        user = await sync_to_async(User.objects.get)(id=user_id)
        username = user.username
        message_text = f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status}\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}"
    except User.DoesNotExist:
        username = f"ID:{user_id}"
        message_text = f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (–∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)\n–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status}\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}"
    except Exception as e:
        print(f"[ERROR notifications.py] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return

    manager_ids = await get_manager_chat_ids()
    if not manager_ids:
        print("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞.")
        logger.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞.")
        return

    for tg_id in manager_ids:
        try:
            await bot_instance.send_message(chat_id=tg_id, text=message_text)
            print(f"[DEBUG notifications.py] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}")
        except Exception as e:
            print(f"[ERROR notifications.py] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –º–µ–Ω–µ–¥–∂–µ—Ä—É {tg_id}: {e}")

# --- /–§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–ú–ï–ù–ï –°–¢–ê–¢–£–°–ê ---

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ö–û–£–¢–ò–ù –ò–ó –°–ò–ù–•–†–û–ù–ù–û–ì–û –ö–û–î–ê (DJANGO SIGNALS) ---
def run_async_notification(coro_func, *args):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot –≤ –ø–æ—Ç–æ–∫–µ.
    """
    print(f"[DEBUG notifications.py] run_async_notification –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è {coro_func.__name__ if hasattr(coro_func, '__name__') else 'coroutine'}")
    logger.debug(f"run_async_notification –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∫–æ—Ä—É—Ç–∏–Ω—ã: {coro_func.__name__ if hasattr(coro_func, '__name__') else 'unknown'}")

    def run_coroutine():
        from aiogram import Bot # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Bot –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞
        bot_instance = Bot(token=settings.TELEGRAM_MANAGER_BOT_TOKEN)
        print(f"[DEBUG notifications.py] –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot —Å–æ–∑–¥–∞–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
        logger.debug(f"–ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot —Å–æ–∑–¥–∞–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")

        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            print(f"[DEBUG notifications.py] –ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
            logger.debug(f"–ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")

            try:
                coro = coro_func(*args, bot_instance)
                loop.run_until_complete(coro)
                print(f"[DEBUG notifications.py] –ö–æ—Ä—É—Ç–∏–Ω–∞ {coro_func.__name__ if hasattr(coro_func, '__name__') else 'unknown'} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
                logger.debug(f"–ö–æ—Ä—É—Ç–∏–Ω–∞ {coro_func.__name__ if hasattr(coro_func, '__name__') else 'unknown'} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
            finally:
                loop.close()
                asyncio.set_event_loop(None)
        except Exception as e:
            print(f"[ERROR run_async_notification] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
            try:
                temp_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(temp_loop)
                temp_loop.run_until_complete(bot_instance.session.close())
                temp_loop.close()
                asyncio.set_event_loop(None)
                print(f"[DEBUG notifications.py] –°–µ—Å—Å–∏—è Bot –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
                logger.debug(f"–°–µ—Å—Å–∏—è Bot –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}")
            except Exception as e:
                print(f"[ERROR run_async_notification] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ Bot: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ Bot: {e}")

    thread = threading.Thread(target=run_coroutine)
    thread.start()
    # thread.join() # –û–±—ã—á–Ω–æ –Ω–µ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ Django

# --- /–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ö–û–£–¢–ò–ù –ò–ó –°–ò–ù–•–†–û–ù–ù–û–ì–û –ö–û–î–ê ---